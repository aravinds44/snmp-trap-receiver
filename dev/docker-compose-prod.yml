version: '3.8'

services:
  snmp-psql:
    image: postgres:15-alpine
    container_name: snmp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-snmptraps}
      POSTGRES_USER: ${POSTGRES_USER:-snmpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-snmppass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - snmp-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: snmp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - snmp-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: snmp-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CREATE_TOPICS: "snmp_traps:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - snmp-network
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:stable-alpine
    container_name: snmp-nginx-lb
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "162:162/udp"
    networks:
      - snmp-network
    depends_on:
      snmptrapd1:
        condition: service_started

  trap-processor:
    image: trap-processor:2.0.1
    container_name: snmp-processor
    volumes:
      - ./logs:/app/logs:z
    environment:
      DB_HOST: snmp-psql
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-snmptraps}
      DB_USER: ${POSTGRES_USER:-snmpuser}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-snmppass123}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      snmp-psql:
        condition: service_started

  grafana:
    image: grafana/grafana:12.0.1
    container_name: snmp-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      POSTGRES_DB: ${POSTGRES_DB:-snmptraps}
      POSTGRES_USER: ${POSTGRES_USER:-snmpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-snmppass123}
      POSTGRES_HOST: snmp-psql
      POSTGRES_PORT: 5432
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - snmp-network
    depends_on:
      snmp-psql:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3


  snmptrapd1:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1162:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd2:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1262:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd3:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1362:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd4:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1462:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd5:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1562:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd6:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1662:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd7:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1762:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

  snmptrapd8:
    image: snmptrapd:2.0.1
    container_name: snmp-trapd-{{i}}
    ports:
      - "1762:162/udp"
    volumes:
      - ./logs:/var/log/snmp:z
      - ./mibs:/custom-mibs:ro
    environment:
      MIBDIRS: /custom-mibs:/usr/share/snmp/mibs
      MIBS: +ALL
      SNMP_USER: ${SNMP_USER:-snmpuser}
      SNMP_AUTH_PASS: ${SNMP_AUTH_PASS:-Oracle@12}
      SNMP_PRIV_PASS: ${SNMP_PRIV_PASS:-Oracle@12}
      SNMP_ENGINE: ${SNMP_ENGINE:-0x80001f880438303030303134333063}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-snmp_traps}
    networks:
      - snmp-network
    depends_on:
      trap-processor:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "2"
    healthcheck:
      test: [ "CMD", "pgrep", "snmptrapd" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  grafana_data:

networks:
  snmp-network:
    driver: bridge
